1) REST API методы 
 - GET,POST,DELETE,OPTIONS
 - OPTIONS может быть использован клиентом для определения параметров или требований, связанных с ресурсом
 
2) Сколько типов данных в РНР?
  PHP поддерживает 8 базовых типов данных.
  4 скалярных типа:
  - boolean
  - integer
  - float
  - string
  2 комплексных (составных) типа:
  - array
  - object
  2 специальных типа:
  - resource
  - NULL
  
3) Разница между define() и const
  - const должны быть объявлены в верхней области
      (Потому что они определяются при компилировании скрипта. 
        Это значит, что const нельзя использовать внутри функций/циклов/выражений if или try/catch блоков)
  - const всегда регистрозависима
      (В то время как define() позволяет создать регистро-независимые константы)
  - const понимает только скаляры
      (const нельзя передать переменные, функции, выражения, а define() можно)
  - const может хранить массивы с версии PHP 5.6, а define с PHP 7.0
  
4) Что значить $$a = 'world';
  - Переменные переменных

5) Что такое final class 

6) __destructor()
  - автоматически вызывается при удалении объекта
  - unset() 
  
7) yield 
 - "yield" можно рассматривать как оператор "return", за исключением того, что вместо прекращения работы функции
 - yield - возврат из функции с сохранением текущего итерационного состояния этой функции
 
8) Перегрузка в PHP
  - https://www.php.net/manual/en/language.oop5.overloading.php#object.get

9) Какая разница между $this и self в PHP?
 - $this – это ссылка на сам объект, а self – на текущий класс
 
10) Преинкремент и постинкремент. В чем между ними разница?
 - Преинкремент (++$i) – сначала увеличивает, потом возвращает значение.
 - Постинкремент ($i++) – сначала возвращает, потом увеличивает значение

11) Чем отличается HTTP от HTTPS
 - HTTP – открытый протокол передачи данных, а HTTPS – закрытый, имеющий надстройку шифрования
 
12) Чем $_COOKIE отличаются от $_SESSION в PHP?
 - cookies - Хранятся в браузере (компьютер пользователя)
 - сессии - хранятся на сервере. (идентификатор сессии хранится в куках).
 - С помощью сессий удобно хранить данные при переходе, с одной страницы на другую.
 - Куки позволяют реализовать механизм так называемый - запомнить меня на этом сайте.
 
13) Интерфейс или абстрактный класс: какой использовать?
 - Используйте интерфейс, если вы хотите заставить разработчиков, работающих в вашей системе (включая вас), 
   реализовать определенное количество методов для классов, которые они будут создавать.
 - Интерфейсы – хороший выбор, если вам известно, что API не будет меняться некоторое время.
 - Также, для реализации «множественного наследования» кроме интерфейсов вы не найдете альтернативных решений.
 - 
 - Используйте абстрактный класс, если вы хотите заставить разработчиков, работающих в вашей системе (включая вас), 
   реализовать определенное количество методов, и вы хотите предоставить некоторые базовые методы, которые помогут 
   им разработать свои дочерние классы.
 - Абстрактный класс также уместно использовать, если вы хотите объявить приватные экземпляры. В интерфейсах, все методы 
   должны быть публичными.  
 - Если вы считаете, что в будущем вам понадобится прибегать к добавлению новых методов, тогда абстрактный класс – лучший вариант. 
   В случае интерфейса вам необходимо будет объявлять новый метод в каждом классе, который реализует ваш интерфейс.
 
 14) mysql LIMIT OFFSET синтаксис
 - OFFSET - смещение относительно начала получаемого списка в ситуации, если бы $offs == 0, то есть:
 
 15) Атомарные и неатомарные операции
 - Атомарная операция — операция, которая либо выполняется целиком, 
   либо не выполняется вовсе; операция, которая не может быть частично выполнена и частично не выполнена.
 
 16) Композиция(Ассоциация) или наследование
 - Ассоциации не РАСШИРЯЮТ класс, а ИСПОЛЬЗУЮТ объект другого класса
 - Наследование подразумевает, что класс наследник, будет иметь все те же свойства и методы, что и в базовом классе. 
 - Композиция - это ассоциация, при которой используемый объект создается внутри класса.
 - Композиция - это по сути включение класса, внутрь другого класса с помощью создания объекта внутри этого класса.
    --------------------------------------------------------------------------------------------------------------
    class B {
      protected $a;
      public function __construct(){
          $this->a = new A;  // создает объект другого класса
      }
    }
   $obj = new B;
   --------------------------------------------------------------------------------------------------------------
 - Агрегация - это ассоциация, при которой используемый объект создается вне класса.
   --------------------------------------------------------------------------------------------------------------
    class B {
      protected $a;
      public function __construct(A $a){
          $this->a = $a;
      }
    }
   $objA = new A; // создает объект другого класса
   $objB = new B($objA)
   --------------------------------------------------------------------------------------------------------------

 16) SOLID 
 - S - Принцип единственной ответственности
    ( Для каждого класса должно быть определено единственное назначение. Все ресурсы, необходимые для его осуществления, 
      должны быть инкапсулированы в этот класс и подчинены только этой задаче.)
 - O - Принцип открытости/закрытости 
    ( «программные сущности … должны быть открыты для расширения, но закрыты для модификации». )
 - L	- Принцип подстановки Лисков 
    ( «объекты в программе должны быть заменяемыми на экземпляры их подтипов без изменения правильности выполнения программы». 
      См. также контрактное программирование. Наследующий класс должен дополнять, а не изменять базовый. )
 - I	- Принцип разделения интерфейса 
    ( «много интерфейсов, специально предназначенных для клиентов, лучше, чем один интерфейс общего назначения»[9]. )
 - D	- Принцип инверсии зависимостей 
     ( «Зависимость на Абстракциях. Нет зависимости на что-то конкретное»[9]. )

  17) Полиморфизм
  - Свойство унаследованных классов иметь одинаковые методы , которые будут работать по разному в контексте обэкта
  - Способность функции обрабатывать данные разных типов
  
  18) Чем отличаются self::, parent:: и static::
  - self — класс в котором написано.
  - static — класс в котором выполнилось.
  
  --------------------------------------------------------------------------------------------------------------
   class A {
   public static function getValSelf()
   {
    return new self();
   }

   public static function getValStatic()
   {
    return new static();
   }
   }

   Class B extends A {
   }

   var_dump(get_class(B::getValSelf())); // 'A'
   var_dump(get_class(B::getValStatic())); // 'B'
  --------------------------------------------------------------------------------------------------------------
   
                                          
                                          SQL
                                          
      
  19) EXPLAIN sql
  - EXPLAIN может в точности рассказать вам, что происходит, когда вы выполняете запрос.
  - Для анализа процесса выполнения и оптимизации сложных MySQL-запросов,
  
  20) DESCRIBE <table_name>; 
  - Сведения о таблице
  
  21) HAVING
  - Ключевое слово HAVING было добавлено в SQL потому, что
  
    SELECT COUNT(course_id), dept_name
      FROM course
      GROUP BY dept_name
    HAVING COUNT(course_id)>1;
   
   22) BETWEEN
   - BETWEEN используется для выбора значений данных из определённого промежутка. 
   
     SELECT * FROM instructor
       WHERE salary BETWEEN 50000 AND 100000; 
       
   23) Агрегатные функции
    - Эти функции используются для получения совокупного результата, относящегося к рассматриваемым данным. 
       COUNT (col_name) — возвращает количество строк;
       SUM (col_name) — возвращает сумму значений в данном столбце;
       AVG (col_name) — возвращает среднее значение данного столбца;
       MIN (col_name) — возвращает наименьшее значение данного столбца;
       MAX (col_name) — возвращает наибольшее значение данного столбца.
       
   24) Что показывает SHOW TABLE STATUS 
    - Команда SHOW TABLE STATUS работает как SHOW STATUS, но предоставляет большое количество информации по каждой таблице. 
      Выводятся следующие столбцы:
      Name	Имя таблицы.
         Type	Тип таблицы. See section 7 Типы таблиц MySQL.
         Row_format	Формат хранения строк (Fixed, Dynamic, или Compressed).
         Rows	Количество строк.
         Avg_row_length	Средняя длина строки.
         Data_length	Размер файла данных.
         Max_data_length	Максимальная длина файла данных.
         Index_length	Длина индексного файла.
         Data_free	Количество распределенных, но не используемых байтов.
         Auto_increment	Следующее значение автоинкремента.
         Create_time	Время создания таблицы.
         Update_time	Время последнего обновления файла данных.
         Check_time	Время последней проверки таблицы.
         Create_options	Дополнительные параметры, использовавшиеся для команды CREATE TABLE.
         Comment	Примечания, внесенные при создании таблицы (или информация о причинах, почему MySQL не может получить доступ к данным в таблицах).
